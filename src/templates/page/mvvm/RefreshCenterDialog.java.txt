
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;

import androidx.databinding.ViewDataBinding;

import com.kidswant.basic.base.jetpack.JPBaseViewModel;
import com.kidswant.basic.base.jetpack.JPDataBindingConfig;
import com.kidswant.basic.base.jetpack.adapter.JPRecyclerViewLoadMoreAdapter;
import com.kidswant.common.dialog.BaseCenterDialogFragment;
import com.kidswant.component.util.DisplayUtil;
import com.kidswant.basic.utils.ToastUtils;

import com.linkkids.component.ui.view.bbsview.AbsBBSRecyclerView.BBSRequestListener;
import com.linkkids.component.ui.view.bbsview.BBSRecyclerView2;

${importR};
${importBR};
import ${package}.mvvm.viewmodel.${name}ViewModel;
import ${modulePackage}.databinding.${name}ItemLayoutBinding;
import ${modulePackage}.databinding.${name}Binding;

import org.jetbrains.annotations.Nullable;

/**
 * @date
 * @author
 * @description (亲，我是做什么的)
 *
 * 使用方式：
 * new ${name}.Builder()
 *      .title("哈哈哈")
 *      .build().show(getSupportFragmentManager(), "${name}");
 *
 * <p>
 * modification history:
 */
public class ${name} extends BaseCenterDialogFragment<${name}Binding> {

    // todo mvvm方式建议不要使用callback交互，建议删除该代码，通过mParentViewModel和父容器进行交互！！！
    public interface I${name}Callback {
        void on${name}Callback();
    }

    // todo sample code, please delete it 属性字段定义
    I${name}Callback mCallback;
    String mTitle;

    ${name}ViewModel mPageViewModel;

    public static final class Builder {
        Bundle bundle;

        public Builder() {
            bundle = new Bundle();
        }

        public Builder title(String val) {
            bundle.putString("title", val);
            return this;
        }

        public ${name} build() {
            ${name} dialog = new ${name}();
            dialog.setArguments(bundle);
            return dialog;
        }
    }

    @Override
    protected boolean supportMVVM() {
        return true;
    }

    @Override
    public JPBaseViewModel initViewModel() {
        mPageViewModel = getFragmentViewModel(${name}ViewModel.class);
//        mParentViewModel = getActivityViewModel(LiveCreateViewModel.class);
        return mPageViewModel;
    }

    @Override
    public JPDataBindingConfig initDataBindConfig() {
        return new JPDataBindingConfig(bindLayoutId())
                .addBindingParam(BR.vm, mPageViewModel)
                .addBindingParam(BR.click, new ClickProxy());
    }

    @Override
    public int bindLayoutId() {
        return R.layout.${layoutName};
    }

    @Override
    public void initData(@Nullable Bundle bundle, Bundle savedInstanceState) {
        // 获取listener
        mCallback = getDialogListener(this, I${name}Callback.class);
        Bundle arguments = getArguments();
        if(arguments != null) {
            // todo sample code, please delete it
            mPageViewModel.title.set(arguments.getString("title"));
        }
    }

    @Override
    public void initView(@Nullable View view) {
        super.initView(view);

        ${name}Binding realBinding = getBinding();

        // 根据实际需要动态设置RecyclerView高度
        ViewGroup.LayoutParams layoutParams = realBinding.bbsRecyclerView.getLayoutParams();
        layoutParams.height = Math.max((int)(DisplayUtil.getScreenHeight(view.getContext()) * 0.6f),
                DisplayUtil.dip2px(view.getContext(), 400));

        BBSRecyclerView2<String> bbsRecyclerView = realBinding.bbsRecyclerView;
        bbsRecyclerView.setBbsAdapter(new InnerAdapter(getContext()))
                //.setNeedShowEmptyNoData(false)
                .setPullRefreshEnable(true)
                .setRequestDataIfViewCreated(true)
                .setInitPage(1)
//                .setNoDataContent("暂无数据～")
//                .setNoDataImage(R.drawable.live_lottery_list_empty_icon)
//                .setRecyclerViewPadding(new Rect(0, DensityUtil.dp2px(12f), 0, DensityUtil.dp2px(12f)))
//                .addItemDecoration(SpacesItemDecoration(0, DensityUtil.dp2px(10f)))
                .setBbsRequestListener(new BBSRecyclerView2.BBSRequestListener() {
                    @Override
                    public void sendRequestData(boolean refresh, int page) {
                        performRequest(page);
                    }

                    @Override
                    public void sendRequestLoadMoreData(int page) {
                        performRequest(page);
                    }
                }).create();
    }

    @Override
    public void bindData(Bundle savedInstanceState) {


        if(mCallback != null) {
            mCallback.on${name}Callback();
        }
    }

    private void performRequest(int pageIndex) {
        // todo perform net Requrest
        mPageViewModel.request.performRequest("xxx");
    }

    /**
     * 页面事件类，可以把所有事件都写在这里
     */
    public class ClickProxy {

        public void confirm() {
            ToastUtils.showToast(getContext(), "confirm: ");
        }

        public void cancel() {
            dismiss();
        }
    }

    private class InnerAdapter extends JPRecyclerViewLoadMoreAdapter<String> {

            private static final int VIEW_TYPE_XXX = 0x2001f;

            public InnerAdapter(Context context) {
                super(context);
            }

            @Override
            public boolean needLoadMore() {
                return true;
            }

            @Override
            protected boolean showFooterViewOfHint() {
                return true;
            }

            @Override
            protected int getRealItemViewType(int position) {
                return VIEW_TYPE_XXX;
            }

            @Override
            protected int getLayoutId(int viewType) {
                if(viewType == VIEW_TYPE_XXX) {
                    return R.layout.${itemLayoutName};
                }
                return super.getLayoutId(viewType);
            }

            @Override
            protected void onBindItem(ViewDataBinding binding, int dataPosition) {
                if(binding instanceof ${name}ItemLayoutBinding) {
                    String itemInfo = getData().get(dataPosition);
                    ${name}ItemLayoutBinding itemLayoutBinding = ((${name}ItemLayoutBinding) binding);
                    itemLayoutBinding.setVm(itemInfo);
                    itemLayoutBinding.tvName.setOnClickListener(v -> {
                        ToastUtils.showToast(mContext, "click item: " + itemInfo);
                    });
                }
            }
        }
}
