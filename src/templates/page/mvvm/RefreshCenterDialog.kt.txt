
import android.content.Context
import android.os.Bundle
import android.os.Parcelable
import android.view.View

import androidx.databinding.ViewDataBinding

import com.galaxybruce.component.ui.jetpack.JPBaseViewModel
import com.galaxybruce.component.ui.jetpack.JPDataBindingConfig
import com.galaxybruce.component.ui.jetpack.adapter.JPRecyclerViewLoadMoreAdapter
import com.galaxybruce.component.ui.dialog.AppCenterDialog
import com.galaxybruce.component.ui.dialog.AppDialogCallback
import com.blankj.utilcode.util.ScreenUtils
import com.blankj.utilcode.util.AdaptScreenUtils
import com.galaxybruce.component.util.ToastUtils

import com.galaxybruce.component.ui.view.recyclerview.AbsAppRecyclerView.AppRequestListener
import com.galaxybruce.component.ui.view.recyclerview.AppRecyclerView2

${importR}
${importBR}
import ${package}.mvvm.viewmodel.${name}ViewModel
import ${modulePackage}.databinding.${name}ItemLayoutBinding
import ${modulePackage}.databinding.${name}Binding
import kotlin.math.max

/**
 * @date
 * @author
 * @description (亲，我是做什么的)
 *
 * 使用方式：
 * ${name}.Builder()
 *      .title("哈哈哈")
 *      .callback(object: ${name}.I${name}Callback {
 *           override fun on${name}Callback() {
 *           }
 *       })
 *      .build()
 *      .show(supportFragmentManager, "${name}")
 *
 * modification history:
 */
class ${name} : AppCenterDialog<${name}Binding>() {

    interface I${name}Callback : AppDialogCallback {
        fun on${name}Callback()
    }

    var mCallback: I${name}Callback? = null
    lateinit var mPageViewModel: ${name}ViewModel

    class Builder {
        var bundle: Bundle = Bundle()

        fun callback(value: Parcelable): Builder {
            bundle.putParcelable("callback", value)
            return this
        }

        fun title(value: String?): Builder {
            bundle.putString("title", value)
            return this
        }

        fun build(): ${name} {
            return ${name}().apply {
                arguments = bundle
            }
        }
    }

    override fun supportMVVM(): Boolean {
        return true
    }

    override fun initViewModel(): JPBaseViewModel {
        mPageViewModel = getFragmentViewModel(${name}ViewModel::class.java)
//        mParentViewModel = getActivityViewModel(LiveCreateViewModel.class);
        return mPageViewModel
    }

    override fun initDataBindConfig(): JPDataBindingConfig {
        return JPDataBindingConfig(bindLayoutId())
            .addBindingParam(BR.vm, mPageViewModel)
            .addBindingParam(BR.click, ClickProxy())
    }

    override fun bindLayoutId(): Int {
        return R.layout.${layoutName}
    }

    override fun initData(bundle: Bundle?, savedInstanceState: Bundle?) {
        // 获取listener
        mCallback = getDialogListener(this, I${name}Callback::class.java)
        bundle?.let {
            mCallback = it.getParcelable("callback") ?: mCallback
            mPageViewModel.title.set(it.getString("title"))
        }
    }

    override fun initView(view: View?) {
        super.initView(view)

        val realBinding = binding
        // 根据实际需要动态设置RecyclerView高度
        val layoutParams = realBinding.appRecyclerView.layoutParams
        layoutParams.height = max(
            (ScreenUtils.getAppScreenHeight() * 0.6f).toInt(),
            AdaptScreenUtils.pt2Px(800f)
        )
        val appRecyclerView: AppRecyclerView2<String> = realBinding.appRecyclerView as AppRecyclerView2<String>
        appRecyclerView.setAdapter(InnerAdapter(requireView().context)) //.setNeedShowEmptyNoData(false)
            .setPullRefreshEnable(true)
            .setRequestDataIfViewCreated(true)
            .setNeedShowLoadingView(false)
            .setInitPage(1)
//                .setNoDataContent("暂无数据～")
//                .setNoDataImage(R.drawable.live_lottery_list_empty_icon)
//                .setRecyclerViewPadding(new Rect(0, DensityUtil.dp2px(12f), 0, DensityUtil.dp2px(12f)))
//                .addItemDecoration(SpacesItemDecoration(0, DensityUtil.dp2px(10f)))
            .setRequestListener(object : AppRequestListener {
                override fun sendRequestData(refresh: Boolean, page: Int) {
                    performRequest(page)
                }

                override fun sendRequestLoadMoreData(page: Int) {
                    performRequest(page)
                }
            }).create()
    }

    override fun bindData(savedInstanceState: Bundle?) {
        super.bindData(savedInstanceState)
    }

    private fun performRequest(pageIndex: Int) {
        mPageViewModel.request.performRequest("xxx")
    }

    /**
     * 页面事件类，可以把所有事件都写在这里
     */
    inner class ClickProxy {

    }

    private inner class InnerAdapter(context: Context) : JPRecyclerViewLoadMoreAdapter<String>(context) {

        override fun getLayoutId(viewType: Int): Int {
            return if (viewType == DEFAULT_REAL_ITEM_VIEW_TYPE) {
                R.layout.${itemLayoutName}
            } else {
                super.getLayoutId(viewType)
            }
        }

        override fun onBindItem(binding: ViewDataBinding, dataPosition: Int) {
            if (binding is ${name}ItemLayoutBinding) {
                val itemInfo = data[dataPosition]
                binding.vm = itemInfo
                binding.tvName.setOnClickListener { v: View? ->
                    if (mCallback != null) {
                        mCallback!!.on${name}Callback()
                    }
                }
            }
        }
    }
}